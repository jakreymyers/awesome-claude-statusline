# ============================================================================
# Claude Code Statusline - Default Configuration Template
# ============================================================================
#
# This file serves as the comprehensive configuration template for installations.
# It uses simplified flat TOML format for reliable parsing across all platforms.
# All settings use dot notation instead of nested sections.
#
# Configuration Order (simplified single source of truth):
# 1. Environment variables (ENV_CONFIG_*) - Temporary overrides
# 2. ~/.claude/statusline/Config.toml - Your configuration (THIS FILE)
# 3. Inline script defaults - Fallback when config missing
#
# ============================================================================

# === THEME CONFIGURATION ===
# Choose your visual theme for the statusline
# Available themes: "jakd", "classic", "garden", "catppuccin", "custom"
theme.name = "jakd"

# === CUSTOM COLORS ===
# Only used when theme.name = "custom"
# Use ANSI escape codes for terminal colors

# Basic ANSI colors (most compatible)
colors.basic.red = "\\033[31m"
colors.basic.blue = "\\033[34m"
colors.basic.green = "\\033[32m"
colors.basic.yellow = "\\033[33m"
colors.basic.magenta = "\\033[35m"
colors.basic.cyan = "\\033[36m"
colors.basic.white = "\\033[37m"

# Extended colors (256-color and bright ANSI)
colors.extended.orange = "\\033[38;5;208m"
colors.extended.light_orange = "\\033[38;5;215m"
colors.extended.light_gray = "\\033[38;5;248m"
colors.extended.bright_green = "\\033[92m"
colors.extended.purple = "\\033[95m"
colors.extended.teal = "\\033[38;5;73m"
colors.extended.gold = "\\033[38;5;220m"
colors.extended.pink_bright = "\\033[38;5;205m"
colors.extended.indigo = "\\033[38;5;105m"
colors.extended.violet = "\\033[38;5;99m"
colors.extended.light_blue = "\\033[38;5;111m"

# Text formatting
colors.formatting.dim = "\\033[2m"
colors.formatting.italic = "\\033[3m"
colors.formatting.strikethrough = "\\033[9m"
colors.formatting.reset = "\\033[0m"

# === CORE FEATURE TOGGLES ===
# Enable/disable major sections of the statusline
features.show_commits = true
features.show_version = true
features.show_submodules = true
features.show_mcp_status = true
features.show_cost_tracking = true
features.show_reset_info = true
features.show_session_info = true

# === MODEL EMOJIS ===
# Emojis displayed for different Claude models
emojis.opus = "üß†"
emojis.haiku = "‚ö°"
emojis.sonnet = "üéµ"
emojis.default_model = "ü§ñ"
emojis.clean_status = "‚úÖ"
emojis.dirty_status = "üìÅ"
emojis.clock = "üïê"
emojis.live_block = "üî•"

# === TIMEOUTS ===
# Timeout values for external command execution
timeouts.mcp = "10s"
timeouts.version = "10s"
timeouts.ccusage = "10s"

# === MODULAR DISPLAY CONFIGURATION ===
# Configure 1-9 line statusline with atomic component system
# Each line can contain any combination of available components

# Number of lines to display (1-9) - SHOWCASING ALL 18 ATOMIC COMPONENTS!
display.lines = 5

# Line 1: Repository Core (separated directory and git components)
display.line1.components = ["directory_info", "git_branch", "commits", "version_info"]
display.line1.separator = " ÔΩ• "
display.line1.show_when_empty = true

# Line 2: Model, MCP Status, and Context Usage
display.line2.components = ["model_info", "mcp_status", "context_usage"]
display.line2.separator = " ÔΩ• "
display.line2.show_when_empty = true

# Line 3: Cost Analytics, Burn Rate, and Reset Timer
display.line3.components = ["cost_usage", "burn_rate", "reset_timer"]
display.line3.separator = " ÔΩ• "
display.line3.show_when_empty = true

# Line 4: Available for future expansion
display.line4.components = []
display.line4.separator = " ÔΩ• "
display.line4.show_when_empty = false

# Line 5: Available for future expansion
display.line5.components = []
display.line5.separator = " ÔΩ• "
display.line5.show_when_empty = false

# Line 6: Available for future expansion
display.line6.components = []
display.line6.separator = " ÔΩ• "
display.line6.show_when_empty = false

# Line 7: Available for future expansion
display.line7.components = []
display.line7.separator = " ÔΩ• "
display.line7.show_when_empty = false

# Line 8: Available for future expansion
display.line8.components = []
display.line8.separator = " ÔΩ• "
display.line8.show_when_empty = false

# Line 9: Available for future expansion
display.line9.components = []
display.line9.separator = " ÔΩ• "
display.line9.show_when_empty = false

# === AVAILABLE COMPONENTS REFERENCE ===
# üîÑ SYNC WARNING: This section MUST be kept synchronized with CLAUDE.md
# When updating component counts, descriptions, or categories here, update CLAUDE.md too!
# ‚ö†Ô∏è  SOURCE OF TRUTH: This Config.toml file - In case of discrepancy, follow this file
#
# === LOGICAL COMPONENT CATEGORIES (20 Total) ===
#
# Repository & Git Components (6):
# - "directory_info" - Current directory path with card index dividers emoji
# - "git_branch"     - Git branch name with leaf emoji
# - "repo_info"      - Repository directory and git branch/status (legacy combined)
# - "commits"        - Commit count for current repository
# - "submodules"     - Submodule status and count
# - "git_stats"      - Combined commits + submodules (legacy format)
# - "version_info"   - Claude Code version display
#
# Model & Session Components (4):
# - "model_info"     - Claude model name with emoji
# - "cost_repo"      - Repository cost tracking
# - "cost_live"      - Live block cost monitoring
# - "reset_timer"    - Block reset countdown timer
#
# Cost Analytics Components (4):
# - "cost_monthly"   - 30-day cost summary
# - "cost_weekly"    - 7-day cost summary
# - "cost_daily"     - Daily cost summary
# - "cost_period"    - Combined 30day/7day/daily costs (legacy format)
#
# Block Metrics Components (4):
# - "burn_rate"        - Token consumption rate (üî•3.5k/min $2.10/hr)
# - "token_usage"      - Total tokens in current 5-hour block (üìä9.5M)
# - "cache_efficiency" - Cache hit percentage for optimization (üíæ91% hit)
# - "block_projection" - Projected cost and tokens (üìà$8.25 10.5M)
#
# System Components (2):
# - "mcp_status"     - MCP server health and connection status
# - "time_display"   - Current time formatting
#
# Spiritual Components: Removed
#
# Example Component Configurations:
# display.line1.components = ["repo_info", "commits", "submodules", "version_info"]  # Separate git data
# display.line2.components = ["model_info", "cost_monthly", "cost_weekly", "cost_daily"]  # Separate cost data
# display.line3.components = ["burn_rate", "token_usage", "cache_efficiency", "block_projection"]  # Block metrics
# display.line4.components = ["cost_repo", "cost_live"]  # Mixed components
#
# Environment Override Examples:
# ENV_CONFIG_DISPLAY_LINES=3 ./statusline.sh
# ENV_CONFIG_LINE1_COMPONENTS="repo_info,commits,version_info" ./statusline.sh
# ENV_CONFIG_LINE2_COMPONENTS="model_info,cost_monthly,cost_daily" ./statusline.sh

# === DISPLAY LABELS ===
# Text labels used throughout the statusline
labels.commits = "Commits:"
labels.repo = "REPO"
labels.monthly = "30DAY"
labels.weekly = "7DAY"
labels.daily = "DAY"
labels.mcp = "MCP"
labels.version_prefix = "ver"
labels.submodule = "SUB:"
labels.session_prefix = "S:"
labels.live = "LIVE"
labels.reset = "RESET"

# === CACHE SETTINGS ===
# Control caching behavior for performance optimization
cache.base_directory = "auto"
cache.enable_universal_caching = true
cache.enable_statistics = true
cache.enable_corruption_detection = true
cache.cleanup_stale_files = true
cache.migrate_legacy_cache = true

# Cache duration settings (in seconds, or "session" for session-wide)
cache.durations.command_exists = "session"
cache.durations.system_info = 86400
cache.durations.claude_version = 21600
cache.durations.git_config = 3600
cache.durations.git_submodules = 300
cache.durations.git_branches = 30
cache.durations.git_status = 10
cache.durations.git_current_branch = 10
cache.durations.mcp_server_list = 120
cache.durations.location_data = 604800
cache.durations.directory_info = 5
cache.durations.file_operations = 2

# Performance and reliability settings
cache.performance.max_lock_retries = 10
cache.performance.lock_retry_delay_ms = "100-500"
cache.performance.atomic_write_timeout = 10
cache.performance.cache_cleanup_interval = 300
cache.performance.max_cache_age_hours = 168

# Security and integrity settings
cache.security.directory_permissions = "700"
cache.security.file_permissions = "600"
cache.security.enable_checksums = true
cache.security.validate_on_read = true
cache.security.secure_temp_files = true
cache.security.instance_isolation = true

# Instance isolation settings - prevent cache contamination between repositories
# Options: "repository" (isolate by working directory), "instance" (by process), "shared" (no isolation)
cache.isolation.mode = "repository"          # Default isolation mode for all cache types
cache.isolation.mcp = "repository"           # MCP server status (prevents showing wrong servers)
cache.isolation.git = "repository"           # Git operations (already repository-aware by design)
cache.isolation.cost = "shared"              # Cost tracking (user-wide, should be shared)
cache.isolation.session = "repository"       # Session costs (isolate per project)

# Legacy compatibility settings
cache.legacy.version_duration = 3600
cache.legacy.version_file = "/tmp/.claude_version_cache"

# === DISPLAY FORMATS ===
# Date and time formatting options
display.time_format = "%H:%M"
display.date_format = "%Y-%m-%d"
display.date_format_compact = "%Y%m%d"

# === ERROR/FALLBACK MESSAGES ===
# Messages displayed when services are unavailable
messages.no_ccusage = "No ccusage"
messages.ccusage_install = "Install ccusage for cost tracking"
messages.no_active_block = "No active block"
messages.mcp_unknown = "unknown"
messages.mcp_none = "none"
messages.unknown_version = "?"
messages.no_submodules = "--"

# === ADVANCED SETTINGS ===
# Fine-grained control over behavior and performance
advanced.warn_missing_deps = false
advanced.debug_mode = false
advanced.performance_mode = false
advanced.strict_validation = true

# === BASH COMPATIBILITY ===
# Universal bash compatibility settings (automatically managed)
compatibility.auto_detect_bash = true
compatibility.enable_compatibility_mode = true
compatibility.compatibility_warnings = true
compatibility.bash_path = ""

# === PLATFORM SETTINGS ===
# Platform-specific configurations
platform.prefer_gtimeout = true
platform.use_gdate = false
platform.color_support_level = "full"

# === PATH CONFIGURATIONS ===
# Customizable paths for various functions
paths.temp_dir = "/tmp"
paths.config_dir = "~/.config/claude-code-statusline"
paths.cache_dir = "~/.cache/claude-code-statusline"
paths.log_file = "~/.cache/claude-code-statusline/statusline.log"

# === PERFORMANCE TUNING ===
# Optimization settings
performance.parallel_data_collection = true
performance.max_concurrent_operations = 3
performance.git_operation_timeout = "10s"
performance.network_operation_timeout = "10s"
performance.enable_smart_caching = true
performance.cache_compression = false

# === DEBUGGING & LOGGING ===
# Development and troubleshooting options
debug.log_level = "error"
debug.log_config_loading = false
debug.log_theme_application = false
debug.log_validation_details = false
debug.benchmark_performance = false
debug.export_debug_info = false

# === THEME INHERITANCE SYSTEM ===
# Advanced theme customization with inheritance
theme.inheritance.enabled = true
theme.inheritance.base_theme = ""
theme.inheritance.override_colors = []
theme.inheritance.merge_strategy = "override"

# === CONDITIONAL CONFIGURATION ===
# Context-aware configuration
conditional.enabled = false

# Work hours configuration (24-hour format)
conditional.work_hours.enabled = false
conditional.work_hours.start_time = "09:00"
conditional.work_hours.end_time = "17:00"
conditional.work_hours.timezone = "local"
conditional.work_hours.work_profile = "work"
conditional.work_hours.off_hours_profile = "personal"

# Git repository context
conditional.git_context.enabled = false
conditional.git_context.work_repos = []
conditional.git_context.personal_repos = []

# === CONFIGURATION PROFILES ===
# Different configurations for different contexts
profiles.enabled = false
profiles.default_profile = "default"
profiles.auto_switch = true

# Profile definitions (examples)
profiles.work.theme = "classic"
profiles.work.show_cost_tracking = true
profiles.work.show_reset_info = true
profiles.work.mcp_timeout = "10s"

profiles.personal.theme = "catppuccin"
profiles.personal.show_cost_tracking = false
profiles.personal.show_reset_info = false
profiles.personal.mcp_timeout = "10s"

profiles.demo.theme = "garden"
profiles.demo.show_cost_tracking = false
profiles.demo.show_commits = false

# === PLUGIN SYSTEM ===
# Extensible data source system (Phase 3 foundation)
plugins.enabled = false
plugins.auto_discovery = true
plugins.plugin_dirs = ["~/.config/claude-code-statusline/plugins", "./plugins"]
plugins.timeout_per_plugin = "10s"

# Built-in plugin configurations
plugins.git_extended.enabled = false
plugins.git_extended.show_stash_count = false
plugins.git_extended.show_ahead_behind = false
plugins.git_extended.show_branch_age = false

plugins.system_info.enabled = false
plugins.system_info.show_load_average = false
plugins.system_info.show_memory_usage = false
plugins.system_info.show_disk_usage = false

plugins.weather.enabled = false
plugins.weather.api_key = ""
plugins.weather.location = "auto"
plugins.weather.units = "metric"

# ============================================================================
# TEMPLATE MAINTENANCE NOTES
# ============================================================================
#
# üîß IMPORTANT: When adding new configuration options to the codebase:
#    1. Add the new option to this template with sensible default values
#    2. Include comprehensive documentation comments for new sections
#    3. Update any related documentation referencing configuration options
#    4. Test the template for TOML syntax validity before committing
#
# üìö This file serves multiple purposes:
#    ‚Ä¢ Installation template (copied to ~/.claude/statusline/Config.toml)
#    ‚Ä¢ Configuration documentation (comprehensive reference)
#    ‚Ä¢ Testing baseline (validated for TOML syntax)
#    ‚Ä¢ Developer reference (complete list of all available options)
#
# üéØ Usage by installer:
#    ‚Ä¢ Downloaded from: https://raw.githubusercontent.com/rz1989s/claude-code-statusline/{branch}/examples/Config.toml
#    ‚Ä¢ Copied to: ~/.claude/statusline/Config.toml (with backup if exists)
#    ‚Ä¢ No shell processing required - direct TOML-to-TOML copy
#
# ============================================================================